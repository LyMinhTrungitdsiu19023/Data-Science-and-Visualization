<DOCTYPE html>
    <html>

    <head>
        <style>
            body {
                background-color: #FFE4C4;
            }
        </style>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script src="https://d3js.org/d3.v4.min.js"></script>



    </head>

    <body>



        <title>Lab 6</title>

        <h1 style="color:blue;">
            <center>Lab 6 – D3.js – Line and stacked area chart</center>
        </h1>
        <i>
            <h2>
                <center>Course: Data science and data visualization.</center>
            </h2>
        </i>
        <h4>Name: Lý Minh Trung</h4>
        <h4>ID: ITDSIU19023.</h4>
        <h4>“This is all my own work. I did not copy the code from any other source” <h4>

                <h4>-----------------------------------------------------------------------------------------------</h4>


                <script>var rowConverter = function (d) {
                        return {
                            Case: parseInt(d["Case"]),
                            Country: d["Country"],
                            Date: new Date(parseInt(d["Year"]), parseInt(d["Month"] - 1), parseInt(d["Day"]))
                        }
                    }
                    d3.csv("https://raw.githubusercontent.com/LyMinhTrungitdsiu19023/Data-Science-and-Visualization/main/Lab/Lab6/Lab6data.csv", rowConverter, function (error, data) {
                        if (error) {
                            console.log(error);
                        }
                        else {
                            console.log(data)

                            var margin = { top: 60, right: 100, bottom: 20, left: 80 },
                                width = 1400 - margin.left - margin.right,
                                height = 700 - margin.top - margin.bottom;

                            var svg = d3.select("body")
                                .append("svg")
                                .style("width", width + margin.left + margin.right + "px")
                                .style("height", height + margin.top + margin.bottom + "px")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", height + margin.top + margin.bottom)
                                .append("g")
                                .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
                                .attr("class", "svg");

                            //NEST : group data by country
                            var nest = d3.nest()
                                .key(function (d) {
                                    return d.Country;
                                })
                                .entries(data)
                            console.log(nest)


                            var x = d3.scaleTime()
                                .domain([d3.min(data, function (d) { return d.Date; }),
                                d3.max(data, function (d) { return d.Date; })
                                ])
                                .range([0, width]);
                            var y = d3.scaleLinear()
                                .domain([0, 1200000])
                                .range([height, 0]);



                            var color = d3.scaleOrdinal()
                                .range(['red', 'Purple', 'blue', 'green'])


                            var xaxis = svg.append("g")
                                .attr("transform", "translate(0," + height + ")")
                                .attr("class", "x axis")
                                .call(d3.axisBottom(x)
                                    .ticks(d3.timeDate)
                                    .tickSize(0, 0)
                                    .tickFormat(d3.timeFormat("%d/%m/20%y"))
                                    .tickSizeInner(0)
                                    .tickPadding(10));


                            var yaxis = svg.append("g")
                                .attr("class", "y axis")
                                .call(d3.axisLeft(y)
                                    .ticks(30)
                                    .tickSizeInner(0)
                                    .tickPadding(6)
                                    .tickSize(0, 0));



                            svg.append("text")
                                .attr("transform", "rotate(0)")
                                .attr("y", -30)
                                .attr("x", 10)
                                .attr("dy", "1em")
                                .style("text-anchor", "middle")
                                .text("CASES")
                                .attr("class", "y axis label")
                                .style("fill", "BLACK")

                            svg.append("text")
                                .attr("y", 620)
                                .attr("x", 1270)
                                .attr("dy", "1em")
                                .style("text-anchor", "middle")
                                .text("Date")
                                .attr("class", "y axis label")
                                .style("fill", "BLACK")

                            svg.append("text")
                                .attr("y", 20)
                                .attr("x", 1250)
                                .attr("dy", "1em")
                                .style("text-anchor", "middle")
                                .text("US")
                                .attr("class", "y axis label")
                                .style("fill", "Purple")
                            svg.append("text")
                                .attr("y", 500)
                                .attr("x", 1250)
                                .attr("dy", "1em")
                                .style("text-anchor", "middle")
                                .text("Italy")
                                .attr("class", "y axis label")
                                .style("fill", "green")
                            svg.append("text")
                                .attr("y", 520)
                                .attr("x", 1250)
                                .attr("dy", "1em")
                                .style("text-anchor", "middle")
                                .text("France")
                                .attr("class", "y axis label")
                                .style("fill", "blue")
                            svg.append("text")
                                .attr("y", 600)
                                .attr("x", 1250)
                                .attr("dy", "1em")
                                .style("text-anchor", "middle")
                                .text("Vietnam")
                                .attr("class", "y axis label")
                                .style("fill", "red")
                            var line = d3.line()
                                .x(d => x(d.Date))
                                .y(d => y(d.Case));

                            let glines = svg.append('g')

                            glines.selectAll('.line-group')
                                .data(nest)
                                .enter()
                                .append('g')
                                .append('path')
                                .attr("fill", "none")
                                .attr("stroke", function (d) { return color(d.key) })
                                .attr('class', function (d) { return "line " + d.key })
                                .attr('d', d => line(d.values))
                                .style("stroke-width", "1")



                            svg
                                .selectAll("myDots")
                                .data(nest)
                                .enter()
                                .append('g')
                                .style("fill", function (d) { return color(d.key) })
                                .attr("stroke", function (d) { return color(d.key) })
                                .style("stroke-width", "1")
                                .selectAll("myPoints")
                                .data(function (d) { return d.values })
                                .enter()
                                .append("circle")
                                .attr("cx", function (d) { return x(d.Date) })
                                .attr("cy", function (d) { return y(d.Case) })
                                .attr("r", 2)
                                .attr('class', function (d) { return "circle " + d.key })


                            // LEGEND 

                            var highlight = function (d) {

                                d3.selectAll(".line")
                                    .transition()
                                    .duration(300)
                                    .style("opacity", 0.05)


                                d3.select("." + d.key)

                                    .transition()
                                    .duration(300)
                                    .style("opacity", "0.5")
                                    .style("stroke-width", "5");
                            }



                            var noHighlight = function (d) {
                                d3.selectAll(".line")
                                    .transition()
                                    .duration("100")
                                    .style("opacity", "1")
                                    .style("stroke-width", "2")

                            }

                            var mouseG = svg.append("g")
                                .attr("class", "mouse-over-effects");

                            mouseG.append("path")
                                .attr("class", "mouse-line")
                                .style("stroke", "black")
                                .style("stroke-dasharray", ("10, 10"))
                                .style("stroke-width", "1px")
                                .style("opacity", "0");

                            var mousePerLine = mouseG.selectAll(".mouse-per-line")
                                .data(nest)
                                .enter()
                                .append("g")
                                .attr("class", "mouse-per-line");

                            mousePerLine.append("circle")
                                .attr("r", 7)
                                .style("stroke", function (d) {
                                    return color(d.key);
                                })
                                .style("fill", "none")
                                .style("stroke-width", "1px")
                                .style("opacity", "0");

                            mousePerLine.append("text").attr("transform", "translate(10,-5)");

                            var tooltip = d3.select("body").append("div")
                                .attr('id', 'tooltip')
                                .style('position', 'absolute')
                                .style("background-color", "white")
                                .style('padding', 10 + 'px')
                                .style('display', 'none')

                            mouseG.append("rect")
                                .attr("width", width)
                                .attr("height", height)
                                .attr("fill", "none")
                                .attr("pointer-events", "all")
                                .on("mouseout", function () {
                                    d3.select(".mouse-line").style("opacity", "0");
                                    d3.selectAll(".mouse-per-line circle").style("opacity", "0");
                                    d3.selectAll(".mouse-per-line text").style("opacity", "0")
                                    d3.selectAll("#tooltip").style('display', 'none')
                                })
                                .on("mouseover", function () {
                                    d3.select(".mouse-line").style("opacity", "1");
                                    d3.selectAll(".mouse-per-line circle").style("opacity", "1");
                                    d3.selectAll(".mouse-per-line text").style("opacity", "1")
                                    d3.selectAll("#tooltip").style('display', 'block')
                                })
                                .on("mousemove", function () {

                                    var mouse = d3.mouse(this);

                                    if (mouse[0] >= width) {
                                        mouseG.select("rect").attr("width", width + 30);
                                        return;
                                    }

                                    d3.selectAll(".mouse-per-line")
                                        .attr("transform", function (d) {

                                            var xDate = x.invert(mouse[0] - 20);
                                            var bisect = d3.bisector(function (d) { return d.Date; }).right;
                                            var idx = bisect(d.values, xDate);

                                            let xCoordinate = (x(d.values[idx].Date)).toString();
                                            let yCoordinate = (y(d.values[idx].Case)).toString();

                                            d3.select(".mouse-line")
                                                .attr("d", function () {
                                                    var data = "M" + xCoordinate + "," + height;
                                                    data += " " + xCoordinate + "," + 0;
                                                    return data;
                                                });

                                            d3.select(this)
                                                .select("text")
                                                .text(y.invert(yCoordinate).toFixed(0))
                                                .attr("fill", function (d) {
                                                    return color(d.key)
                                                });

                                            return "translate(" + xCoordinate + "," + yCoordinate + ")";
                                        });


                                    updateTooltipContent(mouse, nest);
                                })


                            function updateTooltipContent(mouse, nest) {

                                var sortingObj = []

                                nest.map(d => {
                                    var xDate = x.invert(mouse[0] - 20);
                                    var bisect = d3.bisector(function (d) { return d.Date; }).right;
                                    var idx = bisect(d.values, xDate);

                                    sortingObj.push({
                                        country: d.values[idx].Country,
                                        case: d.values[idx].Case,
                                        date: d.values[idx].Date
                                    })
                                })

                                if (sortingObj[0] == null) return;


                                sortingObj.sort((x, y) => y.case - x.case);

                                tooltip.html(d => {
                                    var string = (sortingObj[0].date).toString();
                                    var i = string.indexOf('00:00:00');
                                    return string.substring(0, i);
                                })
                                    .style('left', d3.event.pageX + 50 + "px")
                                    .style('top', d3.event.pageY - 50 + "px")
                                    .style('display', 'block')
                                    .style('font-size', 12)
                                    .selectAll()
                                    .data(sortingObj).enter()
                                    .append('div')
                                    .style('color', d => {
                                        return color(d.country)
                                    })
                                    .style('font-size', 10)
                                    .html(d => {
                                        return d.country + " : " + d.case;
                                    })
                            }
                        }




                    })
                </script>

    </body>

    </html>